It sounds like you are describing a system that uses the Tutis-ID server to enable users to authenticate themselves and sign documents through the Tutis-ID application on their device. In this system, a relying party (such as a website or service) can initiate a transaction by calling the Tutis-ID server's Relying Party (RP) API with the user's identifier and a hash to be signed. The Tutis-ID server then sends a push notification to the user's device, where the user can open the Tutis-ID app and enter a PIN code to complete the authentication or signing process. The Tutis-ID server communicates with the app and, once the signature is created, makes it available for the relying party to retrieve. The relying party can wait for a reply from the Tutis-ID server using a long poll connection, and upon success, receive the signed hash and the user's certificate to validate the result.

It's important to note that in this system, the relying party is responsible for creating the required document structure and calculating the hash for document signing. The Tutis-ID server only accepts hashes to be signed, and it is up to the relying party to handle the document creation and hashing process.
